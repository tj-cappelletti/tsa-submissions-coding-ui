@page "/login"
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Tsa.Submissions.Coding.Ui.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Login</h3>

@if (_isLoggingIn)
{
    <p>Logging in...</p>
}
else
{
    <EditForm Model="_loginModel" OnValidSubmit="HandleLogin" class="form-group">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label>Username:</label>
            <InputText @bind-Value="_loginModel.Username" class="form-control"/>
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="_loginModel.Password" type="password" class="form-control"/>
        </div>

        <button type="submit" class="btn btn-primary" style="margin-top: 20px">Login</button>
    </EditForm>
}

@code {

    [Inject]
    private HttpClient? HttpClient { get; set; }

    private readonly LoginModel _loginModel = new();
    private bool _isLoggingIn;

    private async Task HandleLogin()
    {
        _isLoggingIn = true;

        var authentication = new Authentication
        {
            Password = _loginModel.Password,
            UserName = _loginModel.Username
        };

        // Serialize the object to JSON
        var content = new StringContent(JsonSerializer.Serialize(authentication), Encoding.UTF8, "application/json");

        var response = await HttpClient!.PostAsync("/api/authentication", content);

        if (response.IsSuccessStatusCode)
        {
            // Deserialize the JSON response into an object
            var authenticationResult = await response.Content.ReadFromJsonAsync<Authentication>();

            if (authenticationResult == null)
            {
                // Handle null response
                _isLoggingIn = false;
                return;
            }

            await JSRuntime.InvokeVoidAsync("setCookie", "username", authenticationResult.UserName, 7);
            await JSRuntime.InvokeVoidAsync("setCookie", "api_key", authenticationResult.ApiKey, 7);

            Navigation.NavigateTo("/problems");
        }

        // Handle invalid login
        _isLoggingIn = false;
    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

}